{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "fa945c34-2aaa-447b-8d61-f4ed89e57154",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>row#</th>\n",
       "      <th>user_id</th>\n",
       "      <th>vehicle_model_id</th>\n",
       "      <th>package_id</th>\n",
       "      <th>travel_type_id</th>\n",
       "      <th>from_area_id</th>\n",
       "      <th>to_area_id</th>\n",
       "      <th>from_city_id</th>\n",
       "      <th>to_city_id</th>\n",
       "      <th>from_date</th>\n",
       "      <th>to_date</th>\n",
       "      <th>online_booking</th>\n",
       "      <th>mobile_site_booking</th>\n",
       "      <th>booking_created</th>\n",
       "      <th>from_lat</th>\n",
       "      <th>from_long</th>\n",
       "      <th>to_lat</th>\n",
       "      <th>to_long</th>\n",
       "      <th>Car_Cancellation</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>17712</td>\n",
       "      <td>12</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>1021.0</td>\n",
       "      <td>1323.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1/1/13 22:33</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1/1/13 8:01</td>\n",
       "      <td>13.028530</td>\n",
       "      <td>77.54625</td>\n",
       "      <td>12.869805</td>\n",
       "      <td>77.653211</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>17037</td>\n",
       "      <td>12</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>455.0</td>\n",
       "      <td>1330.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1/1/13 12:43</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1/1/13 9:59</td>\n",
       "      <td>12.999874</td>\n",
       "      <td>77.67812</td>\n",
       "      <td>12.953434</td>\n",
       "      <td>77.706510</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>761</td>\n",
       "      <td>12</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>814.0</td>\n",
       "      <td>393.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1/2/13 0:28</td>\n",
       "      <td>1/3/13 0:00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1/1/13 12:14</td>\n",
       "      <td>12.908993</td>\n",
       "      <td>77.68890</td>\n",
       "      <td>13.199560</td>\n",
       "      <td>77.706880</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>868</td>\n",
       "      <td>12</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>297.0</td>\n",
       "      <td>212.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1/1/13 13:12</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1/1/13 12:42</td>\n",
       "      <td>12.997890</td>\n",
       "      <td>77.61488</td>\n",
       "      <td>12.994740</td>\n",
       "      <td>77.607970</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>21716</td>\n",
       "      <td>28</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>1237.0</td>\n",
       "      <td>330.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1/1/13 16:33</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1/1/13 15:07</td>\n",
       "      <td>12.926450</td>\n",
       "      <td>77.61206</td>\n",
       "      <td>12.858833</td>\n",
       "      <td>77.589127</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   row#  user_id  vehicle_model_id  package_id  travel_type_id  from_area_id  \\\n",
       "0     1    17712                12         NaN               2        1021.0   \n",
       "1     2    17037                12         NaN               2         455.0   \n",
       "2     3      761                12         NaN               2         814.0   \n",
       "3     4      868                12         NaN               2         297.0   \n",
       "4     5    21716                28         NaN               2        1237.0   \n",
       "\n",
       "   to_area_id  from_city_id  to_city_id     from_date      to_date  \\\n",
       "0      1323.0           NaN         NaN  1/1/13 22:33          NaN   \n",
       "1      1330.0           NaN         NaN  1/1/13 12:43          NaN   \n",
       "2       393.0           NaN         NaN   1/2/13 0:28  1/3/13 0:00   \n",
       "3       212.0           NaN         NaN  1/1/13 13:12          NaN   \n",
       "4       330.0           NaN         NaN  1/1/13 16:33          NaN   \n",
       "\n",
       "   online_booking  mobile_site_booking booking_created   from_lat  from_long  \\\n",
       "0               0                    0     1/1/13 8:01  13.028530   77.54625   \n",
       "1               0                    0     1/1/13 9:59  12.999874   77.67812   \n",
       "2               1                    0    1/1/13 12:14  12.908993   77.68890   \n",
       "3               0                    0    1/1/13 12:42  12.997890   77.61488   \n",
       "4               0                    0    1/1/13 15:07  12.926450   77.61206   \n",
       "\n",
       "      to_lat    to_long  Car_Cancellation  \n",
       "0  12.869805  77.653211                 0  \n",
       "1  12.953434  77.706510                 0  \n",
       "2  13.199560  77.706880                 0  \n",
       "3  12.994740  77.607970                 0  \n",
       "4  12.858833  77.589127                 0  "
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load the CSV file\n",
 
    "# Display the first few rows of the original dataframe\n",
    "df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "43fb51cd-a598-4c75-834c-934855d39f7d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>row#</th>\n",
       "      <th>user_id</th>\n",
       "      <th>vehicle_model_id</th>\n",
       "      <th>package_id</th>\n",
       "      <th>travel_type_id</th>\n",
       "      <th>from_area_id</th>\n",
       "      <th>to_area_id</th>\n",
       "      <th>from_city_id</th>\n",
       "      <th>to_city_id</th>\n",
       "      <th>from_date</th>\n",
       "      <th>to_date</th>\n",
       "      <th>online_booking</th>\n",
       "      <th>mobile_site_booking</th>\n",
       "      <th>booking_created</th>\n",
       "      <th>from_lat</th>\n",
       "      <th>from_long</th>\n",
       "      <th>to_lat</th>\n",
       "      <th>to_long</th>\n",
       "      <th>Car_Cancellation</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>17712</td>\n",
       "      <td>12</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1021.0</td>\n",
       "      <td>1323.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1/1/13 22:33</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1/1/13 8:01</td>\n",
       "      <td>13.028530</td>\n",
       "      <td>77.54625</td>\n",
       "      <td>12.869805</td>\n",
       "      <td>77.653211</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>17037</td>\n",
       "      <td>12</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>455.0</td>\n",
       "      <td>1330.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1/1/13 12:43</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1/1/13 9:59</td>\n",
       "      <td>12.999874</td>\n",
       "      <td>77.67812</td>\n",
       "      <td>12.953434</td>\n",
       "      <td>77.706510</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>761</td>\n",
       "      <td>12</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>814.0</td>\n",
       "      <td>393.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1/2/13 0:28</td>\n",
       "      <td>1/3/13 0:00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1/1/13 12:14</td>\n",
       "      <td>12.908993</td>\n",
       "      <td>77.68890</td>\n",
       "      <td>13.199560</td>\n",
       "      <td>77.706880</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>868</td>\n",
       "      <td>12</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>297.0</td>\n",
       "      <td>212.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1/1/13 13:12</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1/1/13 12:42</td>\n",
       "      <td>12.997890</td>\n",
       "      <td>77.61488</td>\n",
       "      <td>12.994740</td>\n",
       "      <td>77.607970</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>21716</td>\n",
       "      <td>28</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1237.0</td>\n",
       "      <td>330.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1/1/13 16:33</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1/1/13 15:07</td>\n",
       "      <td>12.926450</td>\n",
       "      <td>77.61206</td>\n",
       "      <td>12.858833</td>\n",
       "      <td>77.589127</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   row#  user_id  vehicle_model_id  package_id  travel_type_id  from_area_id  \\\n",
       "0     1    17712                12         0.0               2        1021.0   \n",
       "1     2    17037                12         0.0               2         455.0   \n",
       "2     3      761                12         0.0               2         814.0   \n",
       "3     4      868                12         0.0               2         297.0   \n",
       "4     5    21716                28         0.0               2        1237.0   \n",
       "\n",
       "   to_area_id  from_city_id  to_city_id     from_date      to_date  \\\n",
       "0      1323.0           0.0         0.0  1/1/13 22:33            0   \n",
       "1      1330.0           0.0         0.0  1/1/13 12:43            0   \n",
       "2       393.0           0.0         0.0   1/2/13 0:28  1/3/13 0:00   \n",
       "3       212.0           0.0         0.0  1/1/13 13:12            0   \n",
       "4       330.0           0.0         0.0  1/1/13 16:33            0   \n",
       "\n",
       "   online_booking  mobile_site_booking booking_created   from_lat  from_long  \\\n",
       "0               0                    0     1/1/13 8:01  13.028530   77.54625   \n",
       "1               0                    0     1/1/13 9:59  12.999874   77.67812   \n",
       "2               1                    0    1/1/13 12:14  12.908993   77.68890   \n",
       "3               0                    0    1/1/13 12:42  12.997890   77.61488   \n",
       "4               0                    0    1/1/13 15:07  12.926450   77.61206   \n",
       "\n",
       "      to_lat    to_long  Car_Cancellation  \n",
       "0  12.869805  77.653211                 0  \n",
       "1  12.953434  77.706510                 0  \n",
       "2  13.199560  77.706880                 0  \n",
       "3  12.994740  77.607970                 0  \n",
       "4  12.858833  77.589127                 0  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Replace all missing values with 0\n",
    "df_filled = df.fillna(0)\n",
    "\n",
    "# Display the updated DataFrame\n",
    "df_filled.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "be997188-e8d6-4b93-9386-b5e84744bc8d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>from_city_id</th>\n",
       "      <th>to_city_id</th>\n",
       "      <th>within_city</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   from_city_id  to_city_id  within_city\n",
       "0           0.0         0.0            1\n",
       "1           0.0         0.0            1\n",
       "2           0.0         0.0            1\n",
       "3           0.0         0.0            1\n",
       "4           0.0         0.0            1"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a copy of the filled dataframe to work on\n",
    "df_processed = df.fillna(0).copy()\n",
    "\n",
    "# Create the 'within_city' binary variable\n",
    "df_processed['within_city'] = (df_processed['from_city_id'] == df_processed['to_city_id']).astype(int)\n",
    "\n",
    "# Display a sample of the updated dataframe with the new variable\n",
    "df_processed[['from_city_id', 'to_city_id', 'within_city']].head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "93582301-216d-483e-a93c-ecbd59aee148",
   "metadata": {},
   "outputs": [
    {
     df_processed['booking_created'] = pd.to_datetime(df_processed['booking_created'], errors='coerce')\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>booking_created</th>\n",
       "      <th>booking_created_Hour</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2013-01-01 08:01:00</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2013-01-01 09:59:00</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2013-01-01 12:14:00</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2013-01-01 12:42:00</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2013-01-01 15:07:00</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      booking_created  booking_created_Hour\n",
       "0 2013-01-01 08:01:00                     8\n",
       "1 2013-01-01 09:59:00                     9\n",
       "2 2013-01-01 12:14:00                    12\n",
       "3 2013-01-01 12:42:00                    12\n",
       "4 2013-01-01 15:07:00                    15"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Convert 'booking_created' to datetime format\n",
    "df_processed['booking_created'] = pd.to_datetime(df_processed['booking_created'], errors='coerce')\n",
    "\n",
    "# Extract hour from the datetime column\n",
    "df_processed['booking_created_Hour'] = df_processed['booking_created'].dt.hour\n",
    "\n",
    "# Show a preview of the new variable\n",
    "df_processed[['booking_created', 'booking_created_Hour']].head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "f3f13fbb-19ac-4b99-8497-97162ea10ee2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>from_lat</th>\n",
       "      <th>from_long</th>\n",
       "      <th>to_lat</th>\n",
       "      <th>to_long</th>\n",
       "      <th>trip_length</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>13.028530</td>\n",
       "      <td>77.54625</td>\n",
       "      <td>12.869805</td>\n",
       "      <td>77.653211</td>\n",
       "      <td>21.048611</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>12.999874</td>\n",
       "      <td>77.67812</td>\n",
       "      <td>12.953434</td>\n",
       "      <td>77.706510</td>\n",
       "      <td>5.990251</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12.908993</td>\n",
       "      <td>77.68890</td>\n",
       "      <td>13.199560</td>\n",
       "      <td>77.706880</td>\n",
       "      <td>32.204802</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>12.997890</td>\n",
       "      <td>77.61488</td>\n",
       "      <td>12.994740</td>\n",
       "      <td>77.607970</td>\n",
       "      <td>0.826682</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>12.926450</td>\n",
       "      <td>77.61206</td>\n",
       "      <td>12.858833</td>\n",
       "      <td>77.589127</td>\n",
       "      <td>7.883644</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    from_lat  from_long     to_lat    to_long  trip_length\n",
       "0  13.028530   77.54625  12.869805  77.653211    21.048611\n",
       "1  12.999874   77.67812  12.953434  77.706510     5.990251\n",
       "2  12.908993   77.68890  13.199560  77.706880    32.204802\n",
       "3  12.997890   77.61488  12.994740  77.607970     0.826682\n",
       "4  12.926450   77.61206  12.858833  77.589127     7.883644"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from geopy.distance import geodesic\n",
    "\n",
    "# Define a function to calculate trip length using GPS coordinates\n",
    "def calculate_trip_length(row):\n",
    "    from_coords = (row['from_lat'], row['from_long'])\n",
    "    to_coords = (row['to_lat'], row['to_long'])\n",
    "    try:\n",
    "        return geodesic(from_coords, to_coords).kilometers\n",
    "    except:\n",
    "        return 0  # return 0 if there is an error or invalid coordinates\n",
    "\n",
    "# Apply the function to each row\n",
    "df_processed['trip_length'] = df_processed.apply(calculate_trip_length, axis=1)\n",
    "\n",
    "# Show a preview of the new variable\n",
    "df_processed[['from_lat', 'from_long', 'to_lat', 'to_long', 'trip_length']].head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "3d5739e6-573f-4411-9a53-ed46b2e43278",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((6000, 6), (4000, 6), (6000,), (4000,))"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# Define the predictor variables (X) and outcome variable (y)\n",
    "X = df_processed[['travel_type_id', 'within_city', 'online_booking', 'mobile_site_booking', 'booking_created_Hour', 'trip_length']]\n",
    "y = df_processed['Car_Cancellation']\n",
    "\n",
    "# Split the data into 60% training and 40% testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.40, random_state=42)\n",
    "\n",
    "# Display the sizes of the training and test sets\n",
    "X_train.shape, X_test.shape, y_train.shape, y_test.shape\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "1c30fe4d-a0b0-4df3-b0c8-3d9606d920c2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "({'Decision Tree Accuracy': 0.88275,\n",
       "  'Random Forest Accuracy': 0.90325,\n",
       "  'Neural Network Accuracy': 0.92875},\n",
       " '              precision    recall  f1-score   support\\n\\n           0       0.94      0.94      0.94      3717\\n           1       0.18      0.18      0.18       283\\n\\n    accuracy                           0.88      4000\\n   macro avg       0.56      0.56      0.56      4000\\nweighted avg       0.88      0.88      0.88      4000\\n',\n",
       " '              precision    recall  f1-score   support\\n\\n           0       0.93      0.96      0.95      3717\\n           1       0.20      0.12      0.15       283\\n\\n    accuracy                           0.90      4000\\n   macro avg       0.57      0.54      0.55      4000\\nweighted avg       0.88      0.90      0.89      4000\\n',\n",
       " '              precision    recall  f1-score   support\\n\\n           0       0.93      1.00      0.96      3717\\n           1       0.00      0.00      0.00       283\\n\\n    accuracy                           0.93      4000\\n   macro avg       0.46      0.50      0.48      4000\\nweighted avg       0.86      0.93      0.89      4000\\n')"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.neural_network import MLPClassifier\n",
    "from sklearn.metrics import accuracy_score, classification_report\n",
    "\n",
    "# Initialize models\n",
    "dt_model = DecisionTreeClassifier(random_state=42)\n",
    "rf_model = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "nn_model = MLPClassifier(hidden_layer_sizes=(50, 25), max_iter=500, random_state=42)\n",
    "\n",
    "# Train the models\n",
    "dt_model.fit(X_train, y_train)\n",
    "rf_model.fit(X_train, y_train)\n",
    "nn_model.fit(X_train, y_train)\n",
    "\n",
    "# Make predictions\n",
    "y_pred_dt = dt_model.predict(X_test)\n",
    "y_pred_rf = rf_model.predict(X_test)\n",
    "y_pred_nn = nn_model.predict(X_test)\n",
    "\n",
    "# Evaluate models\n",
    "accuracy_dt = accuracy_score(y_test, y_pred_dt)\n",
    "accuracy_rf = accuracy_score(y_test, y_pred_rf)\n",
    "accuracy_nn = accuracy_score(y_test, y_pred_nn)\n",
    "\n",
    "# Generate classification reports\n",
    "report_dt = classification_report(y_test, y_pred_dt)\n",
    "report_rf = classification_report(y_test, y_pred_rf)\n",
    "report_nn = classification_report(y_test, y_pred_nn)\n",
    "\n",
    "# Display results\n",
    "accuracy_results = {\n",
    "    \"Decision Tree Accuracy\": accuracy_dt,\n",
    "    \"Random Forest Accuracy\": accuracy_rf,\n",
    "    \"Neural Network Accuracy\": accuracy_nn\n",
    "}\n",
    "\n",
    "accuracy_results, report_dt, report_rf, report_nn\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e5774a4-38d9-4dad-8ab7-2c2d952d5b65",
   "metadata": {},
   "source": [
    "**Model After Data Cleaning**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "d2798b32-c8fb-4a10-9f4d-0b73451351c4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
         }
   ],
   "source": [
    "!pip install imbalanced-learn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "e52a3772-776b-4f3e-946e-6becceb6a05d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Visualizing Outliers using Boxplot\n",
    "plt.figure(figsize=(8, 5))\n",
    "plt.boxplot(df_processed['trip_length'], vert=False, patch_artist=True)\n",
    "plt.title(\"Boxplot of Trip Length (Detecting Outliers)\")\n",
    "plt.xlabel(\"Trip Length (km)\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "4895e5db-9657-4dac-9a3a-0d0caa6a57cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Count the number of records before removing outliers\n",
    "initial_count = df_processed.shape[0]\n",
    "\n",
    "# Function to remove outliers using IQR method\n",
    "def remove_outliers(df, column):\n",
    "    Q1 = df[column].quantile(0.25)\n",
    "    Q3 = df[column].quantile(0.75)\n",
    "    IQR = Q3 - Q1\n",
    "    lower_bound = Q1 - 1.5 * IQR\n",
    "    upper_bound = Q3 + 1.5 * IQR\n",
    "    return df[(df[column] >= lower_bound) & (df[column] <= upper_bound)]\n",
    "\n",
    "# Remove outliers from 'trip_length'\n",
    "df_no_outliers = remove_outliers(df_processed, 'trip_length')\n",
    "\n",
    "# Count the number of records after removing outliers\n",
    "final_count = df_no_outliers.shape[0]\n",
    "\n",
    "# Calculate number of records deleted\n",
    "records_deleted = initial_count - final_count\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "b82c8aac-4ea3-4a9a-98b1-c8690516b710",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualize boxplot after removing outliers from trip_length\n",
    "plt.figure(figsize=(8, 5))\n",
    "plt.boxplot(df_no_outliers['trip_length'], vert=False, patch_artist=True)\n",
    "plt.title(\"Boxplot of Trip Length After Removing Outliers\")\n",
    "plt.xlabel(\"Trip Length (km)\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83e52b46-c914-4c00-bf4b-5e3d1d05be4b",
   "metadata": {},
   "source": [
    "*Scaling and Standardization*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "cef551d8-828d-4996-ac64-c5a840be356d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>trip_length</th>\n",
       "      <th>booking_created_Hour</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>7.924000e+03</td>\n",
       "      <td>7.924000e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>-1.362980e-16</td>\n",
       "      <td>3.541953e-17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.000063e+00</td>\n",
       "      <td>1.000063e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>-1.643011e+00</td>\n",
       "      <td>-2.698764e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>-8.447658e-01</td>\n",
       "      <td>-6.471761e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>-2.564154e-01</td>\n",
       "      <td>9.885582e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>8.595838e-01</td>\n",
       "      <td>8.448877e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>3.433842e+00</td>\n",
       "      <td>1.590920e+00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        trip_length  booking_created_Hour\n",
       "count  7.924000e+03          7.924000e+03\n",
       "mean  -1.362980e-16          3.541953e-17\n",
       "std    1.000063e+00          1.000063e+00\n",
       "min   -1.643011e+00         -2.698764e+00\n",
       "25%   -8.447658e-01         -6.471761e-01\n",
       "50%   -2.564154e-01          9.885582e-02\n",
       "75%    8.595838e-01          8.448877e-01\n",
       "max    3.433842e+00          1.590920e+00"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "# Create a copy of the cleaned dataset (without outliers)\n",
    "df_scaled = df_no_outliers.copy()\n",
    "\n",
    "# Initialize the scaler\n",
    "scaler = StandardScaler()\n",
    "\n",
    "# Columns to scale\n",
    "numeric_features = ['trip_length', 'booking_created_Hour']\n",
    "\n",
    "# Apply standardization\n",
    "df_scaled[numeric_features] = scaler.fit_transform(df_scaled[numeric_features])\n",
    "\n",
    "# Display the scaled values\n",
    "df_scaled[numeric_features].describe()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "9048cfd2-fb0d-4379-b24a-7333b7effcb5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
   
   "source": [
    "!pip install imbalanced-learn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "4b1f5f1b-195e-44d8-9443-848d93b8c8c4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Car_Cancellation\n",
       "0    7278\n",
       "1     646\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check class distribution before oversampling\n",
    "class_counts_before = df_scaled['Car_Cancellation'].value_counts()\n",
    "class_counts_before"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "89cc4631-2252-44e9-9a63-9d2e234caa20",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Car_Cancellation\n",
       "0    7278\n",
       "1    7278\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Apply SMOTE for oversampling the minority class (cancellations)\n",
    "from imblearn.over_sampling import SMOTE\n",
    "\n",
    "# Define features and target variable\n",
    "X = df_scaled[['travel_type_id', 'within_city', 'online_booking', 'mobile_site_booking', 'booking_created_Hour', 'trip_length']]\n",
    "y = df_scaled['Car_Cancellation']\n",
    "\n",
    "# Initialize SMOTE\n",
    "smote = SMOTE(random_state=42)\n",
    "\n",
    "# Perform oversampling\n",
    "X_resampled, y_resampled = smote.fit_resample(X, y)\n",
    "\n",
    "# Check class distribution after oversampling\n",
    "class_counts_after = pd.Series(y_resampled).value_counts()\n",
    "\n",
    "# Display the results\n",
    "class_counts_after\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "5fbe47d7-d12b-4d4c-93a0-77cb4833bb05",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "({'Decision Tree Accuracy': 0.8327322685900739,\n",
       "  'Random Forest Accuracy': 0.8402885110767645,\n",
       "  'Neural Network Accuracy': 0.745148548857977},\n",
       " '              precision    recall  f1-score   support\\n\\n           0       0.83      0.83      0.83      2891\\n           1       0.84      0.83      0.83      2932\\n\\n    accuracy                           0.83      5823\\n   macro avg       0.83      0.83      0.83      5823\\nweighted avg       0.83      0.83      0.83      5823\\n',\n",
       " '              precision    recall  f1-score   support\\n\\n           0       0.83      0.85      0.84      2891\\n           1       0.85      0.83      0.84      2932\\n\\n    accuracy                           0.84      5823\\n   macro avg       0.84      0.84      0.84      5823\\nweighted avg       0.84      0.84      0.84      5823\\n',\n",
       " '              precision    recall  f1-score   support\\n\\n           0       0.75      0.72      0.74      2891\\n           1       0.74      0.77      0.75      2932\\n\\n    accuracy                           0.75      5823\\n   macro avg       0.75      0.74      0.74      5823\\nweighted avg       0.75      0.75      0.74      5823\\n')"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.neural_network import MLPClassifier\n",
    "from sklearn.metrics import accuracy_score, classification_report\n",
    "\n",
    "# Split the balanced dataset into training (60%) and test (40%) sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.40, random_state=42)\n",
    "\n",
    "# Initialize models\n",
    "dt_model = DecisionTreeClassifier(random_state=42)\n",
    "rf_model = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "nn_model = MLPClassifier(hidden_layer_sizes=(50, 25), max_iter=500, random_state=42)\n",
    "\n",
    "# Train the models\n",
    "dt_model.fit(X_train, y_train)\n",
    "rf_model.fit(X_train, y_train)\n",
    "nn_model.fit(X_train, y_train)\n",
    "\n",
    "# Make predictions\n",
    "y_pred_dt = dt_model.predict(X_test)\n",
    "y_pred_rf = rf_model.predict(X_test)\n",
    "y_pred_nn = nn_model.predict(X_test)\n",
    "\n",
    "# Evaluate models\n",
    "accuracy_dt = accuracy_score(y_test, y_pred_dt)\n",
    "accuracy_rf = accuracy_score(y_test, y_pred_rf)\n",
    "accuracy_nn = accuracy_score(y_test, y_pred_nn)\n",
    "\n",
    "# Generate classification reports\n",
    "report_dt = classification_report(y_test, y_pred_dt)\n",
    "report_rf = classification_report(y_test, y_pred_rf)\n",
    "report_nn = classification_report(y_test, y_pred_nn)\n",
    "\n",
    "# Display accuracy results\n",
    "accuracy_results = {\n",
    "    \"Decision Tree Accuracy\": accuracy_dt,\n",
    "    \"Random Forest Accuracy\": accuracy_rf,\n",
    "    \"Neural Network Accuracy\": accuracy_nn\n",
    "}\n",
    "\n",
    "accuracy_results, report_dt, report_rf, report_nn\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "74e161f4-fe99-43a9-9790-e21cc38ab08b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
